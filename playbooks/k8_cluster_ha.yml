---
- name: Set hosts facts
  hosts: all
  roles:
  - { role: ../roles/kubernetes/set_host_facts, become: true }

- name: Set api_url to load balancer ip if not defined
  hosts: masters
  tasks:
  - set_fact: 
      api_url: "{{ hostvars[groups['load_balancers'][0]].peer_ip }}"
    when: api_url is undefined

- name: Prepare inventory list for stores
  hosts: masters,stores
  tasks:
  - set_fact: 
      stores_inventory_hostnames: "{{ groups['stores'] | join(' ') }}"

- name: Prepare peer inventory list for stores
  hosts: masters,stores
  tasks:
  - set_fact: 
      stores_peer_inventory_hostnames: "{{ groups['stores'] | map('extract', hostvars, 'peer_ip') | list | join(' ') }}"

- name: Prepare inventory list for masters
  hosts: load_balancers
  tasks:
  - set_fact: 
      masters_inventory_hostnames: "{{ groups['masters'] | join(' ') }}"

- name: Prepare peer inventory list for masters
  hosts: load_balancers
  tasks:
  - set_fact: 
      masters_peer_inventory_hostnames: "{{ groups['masters'] | map('extract', hostvars, 'peer_ip') | list | join(' ') }}"

- name: Setup load balancer
  hosts: load_balancers
  vars:
    master_hostnames: "{{ groups['masters'] | join(' ') }}"
  roles:
  - { role: ../roles/docker, become: true }
  - { role: ../roles/kubernetes/load_balancer, become: true }

- name: Setup Docker and Kubeadm dependencies on k8 machines
  hosts: masters,workers,stores
  roles:
  - { role: ../roles/docker, become: true }
  - { role: ../roles/kubernetes/kubeadm, become: true }

- name: Setup etcd credentials on master 0
  hosts: stores[0]
  roles:
  - { role: ../roles/kubernetes/etcd/generate_certificates, become: true }
  - { role: ../roles/kubernetes/etcd/get_certificates, become: true }

- name: Setup etcd credentials on other masters
  hosts: stores[1:]
  roles:
  - { role: ../roles/kubernetes/etcd/send_certificates, become: true }

- name: Complete etcd setup
  hosts: stores
  roles:
  - { role: ../roles/kubernetes/etcd/generate_peer_certificates, become: true }
  - { role: ../roles/kubernetes/etcd/launch, become: true, user: admin }

- name: Initialize first master, setup workers' network, get certificates and get join command
  hosts: masters[0]
  roles:
  - { role: ../roles/kubernetes/masters/init, become: true }
  - { role: ../roles/kubernetes/masters/flannel_network, become: true }
  - { role: ../roles/kubernetes/masters/get_certificates, become: true }
  - { role: ../roles/kubernetes/masters/store_join_command, become: true }

- name: Copy certificates to other masters and initialize them
  hosts: masters[1:]
  roles:
  - { role: ../roles/kubernetes/masters/send_certificates, become: true }
  - { role: ../roles/kubernetes/masters/init, become: true }

- name: Install Workers
  hosts: workers
  roles:
  - { role: ../roles/kubernetes/workers/join, become: true }